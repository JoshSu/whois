group structureGroup;

main( package, struct ) ::= <<
package <package>;

/* automatically generated: do not edit manually */

import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import com.google.common.base.Objects;
import com.google.common.base.Preconditions;
import com.google.common.collect.Lists;
import net.ripe.db.whois.api.rest.domain.Attribute;
import net.ripe.db.whois.api.rest.domain.WhoisObject;
import net.ripe.db.whois.api.rest.domain.WhoisResources;
import net.ripe.db.whois.api.rest.domain.Source;

public class <struct.nameToFirstUpper> {
    private static final List\<String\> ATTR_NOT_IN_REQ = Arrays.asList("auth","created","last-modified");

	<struct.attributeTemplates:attributeDeclaration()>

	<struct.attributeTemplates:attributeGetter()>

	<struct:validate()>

	<struct:toString()>

	<struct:toRequest()>

	<struct:constructorFromBuilder()>

    <struct:builderClass()>

};
>>

attributeDeclaration( attributeTemplate ) ::= <<
    <if( attributeTemplate.multiple )>
	private List\<CommentedValue\> <attributeTemplate.attributeType.nameToFirstLower> = new ArrayList\<CommentedValue\>();
    <else>
	private CommentedValue <attributeTemplate.attributeType.nameToFirstLower> = null;
    <endif>

>>

methodParameter( attributeType ) ::= <<
	String <attributeType.nameToFirstLower>
>>

attributeGetter( attributeTemplate )  ::= <<

    <if( attributeTemplate.multiple )>
        public List\<String\> get<attributeTemplate.attributeType.nameToFirstUpper>() {
            List\<String\> values = new ArrayList\<String\>();
            for( CommentedValue value: this.<attributeTemplate.attributeType.nameToFirstLower> ) {
    		    values.add( value.getValue() );
    		}
    		return values;
    	}

        public String getFirst<attributeTemplate.attributeType.nameToFirstUpper>() {
            String value = null;
    		if( this.<attributeTemplate.attributeType.nameToFirstLower>.size() > 0 ) {
    		    value = this.<attributeTemplate.attributeType.nameToFirstLower>.get(0).getValue();
    		}
    	    return value;
    	}
    <else>
        public String get<attributeTemplate.attributeType.nameToFirstUpper>() {
            String value = null;
            if( this.<attributeTemplate.attributeType.nameToFirstLower> != null ) {
                this.<attributeTemplate.attributeType.nameToFirstLower>.getValue();
            }
    	    return value;
        }
    <endif>

>>


validate( struct ) ::= <<

	public void validate() {
		<struct.attributeTemplates:attributeValidator()>
	}

>>

attributeValidator( attributeTemplate )  ::= <<
    <if( attributeTemplate.mandatory  )>
        <if( attributeTemplate.multiple )>
            Preconditions.checkState( <attributeTemplate.attributeType.nameToFirstLower>.size() > 0, "Missing (multiple) mandatory attribute '<attributeTemplate.attributeType.name>'" );
        <else>
            Preconditions.checkState( <attributeTemplate.attributeType.nameToFirstLower>.getValue() != null, "Missing (single) mandatory attribute '<attributeTemplate.attributeType.name>'" );
        <endif>
    <endif>

>>


toRequest( struct ) ::= <<

    public WhoisResources toRequest() {
        WhoisResources whoisResources = new WhoisResources();

        WhoisObject whoisObject = new WhoisObject();
        whoisObject.setSource(new Source(this.source.getValue()));
        whoisObject.setType("<struct.objectType.name>");

        List<Attribute> attributes = Lists.newArrayList();
        <struct.attributeTemplates:attributeCopierFrom()>
        whoisObject.setAttributes(attributes);

        whoisResources.setWhoisObjects(Arrays.asList(whoisObject));
        return  whoisResources;
    }

>>

attributeCopierFrom( attribute ) ::= <<
    if( <attribute.attributeType.nameToFirstLower> != null ) {
        if( ! ATTR_NOT_IN_REQ.contains("<attribute.attributeType.name>")) {
        <if( attribute.multiple )>
            for( CommentedValue value : <attribute.attributeType.nameToFirstLower> ) {
                attributes.add(new Attribute("<attribute.attributeType.name>",
                                      value.getValue(),
                                      value.getComment(),
                                      null, null ));
            }
        <else>
            attributes.add(new Attribute("<attribute.attributeType.name>",
                                      <attribute.attributeType.nameToFirstLower>.getValue(),
                                      <attribute.attributeType.nameToFirstLower>.getComment(),
                                      null, null ));
        <endif>
        }
    }

>>


stringAattributePrinter( attributeTemplate )  ::= <<
    .add( "<attributeTemplate.attributeType.name>", this.<attributeTemplate.attributeType.nameToFirstLower> )

>>

toString( struct ) ::= <<

	public String toString() {
	    StringBuffer sb = new StringBuffer();
		sb.append("\n" );
		<struct.attributeTemplates:rpslAttributePrinter()>
		sb.append("\n" );
       return sb.toString();
	}

    private void appendRpslAttribute(StringBuffer sb, String key, CommentedValue value) {
        if( value != null ) {
            String comment = value.getComment() == null ? "" : String.format(" # %s", value.getComment() );
            sb.append(String.format("\t%-20s%s%s\n", String.format("%s:", key), value.getValue(), comment));
        }
    }

    private void appendRpslAttribute(StringBuffer sb, String key, List\<CommentedValue\> values) {
        for (CommentedValue value : values) {
            String comment = value.getComment() == null ? "" : String.format(" # %s", value.getComment() );
            sb.append(String.format("\t%-20s%s%s\n", String.format("%s:", key), value.getValue(), comment));
        }
    }

>>

rpslAttributePrinter( attributeTemplate )  ::= <<

    appendRpslAttribute( sb, "<attributeTemplate.attributeType.name>", this.<attributeTemplate.attributeType.nameToFirstLower> );

>>



builderClass( struct ) ::= <<

    public static class Builder {

    	<struct.attributeTemplates:attributeDeclaration()>

      <struct:builderFromResponse()>

    	<struct.attributeTemplates:builderAttributeSetterGetter()>

    	<struct:buildMethod( )>
    };

>>

builderFromResponse( struct ) ::= <<

    public static Builder fromResponse(WhoisResources whoisResources) {
        Builder builder = new Builder();
        for( WhoisObject whoisObject: whoisResources.getWhoisObjects()) {
            if( whoisObject.getType().equals("<struct.objectType.name>")) {
                for( net.ripe.db.whois.api.rest.domain.Attribute attr: whoisObject.getAttributes()) {
                         <struct.attributeTemplates:attributeCopierTo()>
                }
                break;
            }
        }
        return builder;
    }

>>

attributeCopierTo( attribute ) ::= <<
    <if( attribute.multiple )>
    if( attr.getName().equals("<attribute.attributeType.name>")) {
         builder.add<attribute.attributeType.nameToFirstUpper>WithComment(attr.getValue(),attr.getComment() );
    }
    <else>
    if( attr.getName().equals("<attribute.attributeType.name>")) {
         builder.set<attribute.attributeType.nameToFirstUpper>WithComment(attr.getValue(),attr.getComment() );
    }
    <endif>
>>



builderAttributeSetterGetter( attributeTemplate  )  ::= <<

        <if( attributeTemplate.multiple )>
        public Builder <if( attributeTemplate.mandatory )>mandatory<else>optional<endif>Add<attributeTemplate.attributeType.nameToFirstUpper>( <methodParameter(attributeTemplate.attributeType)> ) {
            this.<attributeTemplate.attributeType.nameToFirstLower>.add( new CommentedValue(<attributeTemplate.attributeType.nameToFirstLower>) );
            return this;
        }
        public Builder <if( attributeTemplate.mandatory )>mandatory<else>optional<endif>Add<attributeTemplate.attributeType.nameToFirstUpper>( CommentedValue cvalue ) {
            this.<attributeTemplate.attributeType.nameToFirstLower>.add( new CommentedValue(cvalue.getValue(), cvalue.getComment()) );
            return this;
        }
        public Builder add<attributeTemplate.attributeType.nameToFirstUpper>( <methodParameter(attributeTemplate.attributeType)> ) {
            this.<attributeTemplate.attributeType.nameToFirstLower>.add( new CommentedValue(<attributeTemplate.attributeType.nameToFirstLower>) );
            return this;
        }
        public Builder add<attributeTemplate.attributeType.nameToFirstUpper>WithComment( <methodParameter(attributeTemplate.attributeType)>,String comment ) {
            this.<attributeTemplate.attributeType.nameToFirstLower>.add( new CommentedValue(<attributeTemplate.attributeType.nameToFirstLower>,comment ));
            return this;
        }
        public List\<CommentedValue\> get<attributeTemplate.attributeType.nameToFirstUpper>WithComment() {
            return this.<attributeTemplate.attributeType.nameToFirstLower>;
        }
        public List\<String\> get<attributeTemplate.attributeType.nameToFirstUpper>() {
            List\<String\> values = new ArrayList<String>();
            for( CommentedValue value : <attributeTemplate.attributeType.nameToFirstLower> ) {
                values.add( value.getValue() );
            }
            return values;
        }

        <else>
        public Builder <if( attributeTemplate.mandatory )>mandatory<else>optional<endif>Set<attributeTemplate.attributeType.nameToFirstUpper>( <methodParameter(attributeTemplate.attributeType)> ) {
            this.<attributeTemplate.attributeType.nameToFirstLower> = new CommentedValue(<attributeTemplate.attributeType.nameToFirstLower>);
            return this;
        }
        public Builder <if( attributeTemplate.mandatory )>mandatory<else>optional<endif>Set<attributeTemplate.attributeType.nameToFirstUpper>( CommentedValue cvalue ) {
            this.<attributeTemplate.attributeType.nameToFirstLower> = new CommentedValue(cvalue.getValue(), cvalue.getComment() );
            return this;
        }
        public Builder set<attributeTemplate.attributeType.nameToFirstUpper>( <methodParameter(attributeTemplate.attributeType)> ) {
            this.<attributeTemplate.attributeType.nameToFirstLower> = new CommentedValue(<attributeTemplate.attributeType.nameToFirstLower>);
            return this;
        }
        public Builder set<attributeTemplate.attributeType.nameToFirstUpper>WithComment( <methodParameter(attributeTemplate.attributeType)>,String comment ) {
            this.<attributeTemplate.attributeType.nameToFirstLower> = new CommentedValue(<attributeTemplate.attributeType.nameToFirstLower>, comment);
            return this;
        }
        public CommentedValue get<attributeTemplate.attributeType.nameToFirstUpper>WithComment( ) {
            return this.<attributeTemplate.attributeType.nameToFirstLower>;
        }
        public String get<attributeTemplate.attributeType.nameToFirstUpper>( ) {
            String value = null;
            if( this.<attributeTemplate.attributeType.nameToFirstLower> != null ) {
                value = this.<attributeTemplate.attributeType.nameToFirstLower>.getValue();
            }
            return value;
        }
        <endif>

>>


buildMethod( struct )  ::= <<
    public <struct.nameToFirstUpper> build () {
        <struct.nameToFirstUpper> obj = new <struct.nameToFirstUpper>( this );
        obj.validate();
        return obj;
    }
>>

constructorFromBuilder( struct ) ::= <<

    public <struct.nameToFirstUpper>( Builder builder ) {

        <struct.attributeTemplates:builderConstructorParameterAssignment()>

    }

>>

builderConstructorParameterAssignment( attributeTemplate ) ::= <<

    this.<attributeTemplate.attributeType.nameToFirstLower> = builder.<attributeTemplate.attributeType.nameToFirstLower>;

>>